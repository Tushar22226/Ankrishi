import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  ActivityIndicator,
  RefreshControl,
  TouchableOpacity,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { colors, typography, spacing, borderRadius } from '../../theme';
import { useAuth } from '../../context/AuthContext';
import ForecastService from '../../services/ForecastService';
import AIMarketForecastService from '../../services/AIMarketForecastService';
import Card from '../../components/Card';
import LoadingQuote from '../../components/LoadingQuote';
import { getPlatformTopSpacing } from '../../utils/platformUtils';

// Basic ForecastScreen component
const ForecastScreen = () => {
  const navigation = useNavigation();
  const { userProfile } = useAuth();

  // State variables
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [weatherForecast, setWeatherForecast] = useState<any[]>([]);
  const [recommendations, setRecommendations] = useState<string[]>([]);
  const [activeTab, setActiveTab] = useState<'weather' | 'market' | 'crop'>('weather');
  const [marketForecasts, setMarketForecasts] = useState<any[]>([]);
  const [cropRecommendations, setCropRecommendations] = useState<any[]>([]);

  // Load data on component mount
  useEffect(() => {
    loadData();
  }, []);

  // Function to load all forecast data
  const loadData = async () => {
    try {
      setLoading(true);

      // Check if user has location data
      if (!userProfile?.location) {
        console.log('No location data available');
        setLoading(false);
        return;
      }

      // Get weather forecast
      try {
        const forecast = await ForecastService.getWeatherForecast(userProfile.location, 7);
        setWeatherForecast(forecast);
      } catch (weatherError) {
        console.log('Using synthetic weather data due to API issue');
        // If there's an error, we'll use the synthetic data that's generated by the service
      }

      // Get AI recommendations
      try {
        const recs = await ForecastService.getPersonalizedRecommendations(
          userProfile.uid,
          userProfile.location
        );
        setRecommendations(recs);
      } catch (recError) {
        console.log('Error getting recommendations:', recError);
      }

      // Get market price forecasts for a wider range of crops
      const crops = [
        // Cereals
        'rice', 'wheat', 'maize', 'bajra', 'jowar',
        // Vegetables
        'tomato', 'potato', 'onion', 'cauliflower', 'brinjal',
        // Pulses
        'moong', 'masoor', 'chana', 'toor', 'urad',
        // Cash crops
        'soybean', 'cotton', 'sugarcane',
        // Fruits
        'mango', 'banana'
      ];
      const marketData = [];

      // Get forecasts from AIMarketForecastService directly for better performance
      try {
        const allForecasts = await AIMarketForecastService.getMarketPriceForecasts(userProfile.location);

        // Filter to include only the crops we're interested in
        const filteredForecasts = allForecasts.filter(forecast =>
          crops.includes(forecast.productId.toLowerCase())
        );

        // Sort by price change percentage (highest first) to show most significant changes
        marketData.push(...filteredForecasts.sort((a, b) =>
          Math.abs(b.priceChangePercentage) - Math.abs(a.priceChangePercentage)
        ));
      } catch (error) {
        console.error('Error getting market forecasts:', error);

        // Fallback to individual forecasts if bulk method fails
        for (const crop of crops.slice(0, 5)) { // Limit to 5 crops in fallback mode
          const forecast = await ForecastService.getMarketPriceForecast(crop, userProfile.location);
          if (forecast) {
            marketData.push(forecast);
          }
        }
      }

      setMarketForecasts(marketData);

      // Get crop recommendations
      const cropRecs = await ForecastService.getCropRecommendations(userProfile.location);
      setCropRecommendations(cropRecs);

    } catch (error) {
      console.error('Error loading forecast data:', error);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  // Handle refresh
  const handleRefresh = () => {
    setRefreshing(true);
    loadData();
  };

  // Render loading state
  if (loading) {
    return (
      <LoadingQuote
        loadingText="Loading forecast data..."
        style={styles.loadingContainer}
      />
    );
  }

  // Render no location state
  if (!userProfile?.location) {
    return (
      <View style={styles.noDataContainer}>
        <Ionicons name="location-outline" size={64} color={colors.mediumGray} />
        <Text style={styles.noDataTitle}>No Location Data</Text>
        <Text style={styles.noDataText}>
          Please update your profile with your location to get personalized forecasts.
        </Text>
      </View>
    );
  }

  return (
    <ScrollView
      style={styles.container}
      contentContainerStyle={styles.contentContainer}
      refreshControl={
        <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
      }
    >
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <Text style={styles.title}>AI Forecasts</Text>
          <Text style={styles.subtitle}>
            Personalized predictions for your farm
          </Text>
        </View>
        <TouchableOpacity
          style={styles.aiButton}
          onPress={() => navigation.navigate('AIForecast' as never)}
        >
          <Ionicons name="analytics" size={24} color={colors.primary} />
          <Text style={styles.aiButtonText}>Advanced AI</Text>
        </TouchableOpacity>
      </View>

      {/* Tab Navigation */}
      <View style={styles.tabContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'weather' && styles.activeTab]}
          onPress={() => setActiveTab('weather')}
        >
          <Ionicons
            name="partly-sunny"
            size={20}
            color={activeTab === 'weather' ? colors.primary : colors.mediumGray}
          />
          <Text
            style={[
              styles.tabText,
              activeTab === 'weather' && styles.activeTabText,
            ]}
          >
            Weather
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.tab, activeTab === 'market' && styles.activeTab]}
          onPress={() => setActiveTab('market')}
        >
          <Ionicons
            name="trending-up"
            size={20}
            color={activeTab === 'market' ? colors.primary : colors.mediumGray}
          />
          <Text
            style={[
              styles.tabText,
              activeTab === 'market' && styles.activeTabText,
            ]}
          >
            Market
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.tab, activeTab === 'crop' && styles.activeTab]}
          onPress={() => setActiveTab('crop')}
        >
          <Ionicons
            name="leaf"
            size={20}
            color={activeTab === 'crop' ? colors.primary : colors.mediumGray}
          />
          <Text
            style={[
              styles.tabText,
              activeTab === 'crop' && styles.activeTabText,
            ]}
          >
            Crops
          </Text>
        </TouchableOpacity>
      </View>

      {/* AI Recommendations - Only show when weather tab is active */}
      {activeTab === 'weather' && (
        <Card style={styles.recommendationsCard}>
          <Text style={styles.sectionTitle}>AI Recommendations</Text>

          {recommendations.length > 0 ? (
            recommendations.map((recommendation, index) => (
              <View key={`rec-${index}`} style={styles.recommendationItem}>
                <Ionicons name="bulb-outline" size={24} color={colors.secondary} />
                <Text style={styles.recommendationText}>{recommendation}</Text>
              </View>
            ))
          ) : (
            <Text style={styles.noDataText}>No recommendations available</Text>
          )}
        </Card>
      )}

      {/* Weather Forecast Section */}
      {activeTab === 'weather' && weatherForecast.length > 0 && (
        <View style={styles.forecastSection}>
          <Text style={styles.sectionTitle}>7-Day Weather Forecast</Text>

          {/* Today's Weather */}
          <Card style={styles.todayWeatherCard}>
            <Text style={styles.cardTitle}>Today's Weather</Text>
            <View style={styles.todayWeatherContent}>
              <View style={styles.weatherIconContainer}>
                <Ionicons
                  name={getWeatherIcon(weatherForecast[0].condition)}
                  size={64}
                  color={colors.primary}
                />
                <Text style={styles.weatherCondition}>
                  {formatCondition(weatherForecast[0].condition)}
                </Text>
              </View>

              <View style={styles.temperatureContainer}>
                <Text style={styles.currentTemperature}>
                  {Math.round(weatherForecast[0].temperature.avg)}°C
                </Text>
                <Text style={styles.minMaxTemp}>
                  H: {Math.round(weatherForecast[0].temperature.max)}° L: {Math.round(weatherForecast[0].temperature.min)}°
                </Text>
              </View>

              <View style={styles.weatherDetailsContainer}>
                <View style={styles.weatherDetail}>
                  <Ionicons name="water-outline" size={16} color={colors.textSecondary} />
                  <Text style={styles.weatherDetailText}>
                    Humidity: {weatherForecast[0].humidity}%
                  </Text>
                </View>

                <View style={styles.weatherDetail}>
                  <Ionicons name="umbrella-outline" size={16} color={colors.textSecondary} />
                  <Text style={styles.weatherDetailText}>
                    Rain: {(weatherForecast[0].precipitation.probability * 100).toFixed(0)}%
                  </Text>
                </View>

                <View style={styles.weatherDetail}>
                  <Ionicons name="speedometer-outline" size={16} color={colors.textSecondary} />
                  <Text style={styles.weatherDetailText}>
                    Wind: {weatherForecast[0].windSpeed} km/h
                  </Text>
                </View>

                <View style={styles.weatherDetail}>
                  <Ionicons name="sunny-outline" size={16} color={colors.textSecondary} />
                  <Text style={styles.weatherDetailText}>
                    UV Index: {weatherForecast[0].uvIndex}
                  </Text>
                </View>
              </View>
            </View>
          </Card>

          {/* Weekly Forecast */}
          <View style={styles.weeklyForecastContainer}>
            {weatherForecast.slice(1).map((day, index) => (
              <Card key={`day-${index}`} style={styles.dayForecastCard}>
                <View style={styles.dayForecastContent}>
                  <View style={styles.dayNameContainer}>
                    <Text style={styles.dayName}>
                      {new Date(day.date).toLocaleDateString('en-US', { weekday: 'short' })}
                    </Text>
                    <Text style={styles.dayCondition}>
                      {formatDate(day.date)}
                    </Text>
                  </View>

                  <View style={styles.dayIconContainer}>
                    <Ionicons
                      name={getWeatherIcon(day.condition)}
                      size={24}
                      color={colors.primary}
                    />
                    <Text style={styles.dayCondition}>
                      {formatCondition(day.condition)}
                    </Text>
                  </View>

                  <View style={styles.dayTempContainer}>
                    <Text style={styles.dayTemp}>
                      {Math.round(day.temperature.max)}°
                    </Text>
                    <Text style={styles.dayTempMin}>
                      {Math.round(day.temperature.min)}°
                    </Text>
                  </View>

                  <View style={styles.dayPrecipContainer}>
                    <Ionicons name="umbrella-outline" size={16} color={colors.textSecondary} />
                    <Text style={styles.dayPrecip}>
                      {(day.precipitation.probability * 100).toFixed(0)}%
                    </Text>
                  </View>
                </View>
              </Card>
            ))}
          </View>
        </View>
      )}

      {/* Market Price Forecast Section */}
      {activeTab === 'market' && (
        <View style={styles.forecastSection}>
          <Text style={styles.sectionTitle}>Market Price Forecast</Text>

          {marketForecasts.length > 0 ? (
            <>
              <Text style={styles.subtitle}>
                AI-powered price predictions for the next 30 days
              </Text>

              {marketForecasts.map((forecast, index) => (
                <Card key={`market-${index}`} style={styles.marketCard}>
                  <View style={styles.marketCardHeader}>
                    <Text style={styles.marketCropName}>{forecast.productName}</Text>
                    <View style={[
                      styles.priceTrend,
                      forecast.priceChangePercentage > 0 ? styles.priceTrendUp : styles.priceTrendDown
                    ]}>
                      <Ionicons
                        name={forecast.priceChangePercentage > 0 ? 'arrow-up' : 'arrow-down'}
                        size={16}
                        color={colors.white}
                      />
                      <Text style={styles.priceTrendText}>
                        {Math.abs(forecast.priceChangePercentage).toFixed(1)}%
                      </Text>
                    </View>
                  </View>

                  <View style={styles.priceContainer}>
                    <View style={styles.priceItem}>
                      <Text style={styles.priceLabel}>Current Price</Text>
                      <Text style={styles.priceValue}>₹{forecast.currentPrice}/kg</Text>
                    </View>

                    <View style={styles.priceArrow}>
                      <Ionicons
                        name="arrow-forward"
                        size={20}
                        color={colors.mediumGray}
                      />
                    </View>

                    <View style={styles.priceItem}>
                      <Text style={styles.priceLabel}>Forecasted Price</Text>
                      <Text style={[
                        styles.priceValue,
                        forecast.priceChangePercentage > 0 ? styles.priceUp : styles.priceDown
                      ]}>
                        ₹{forecast.forecastedPrice}/kg
                      </Text>
                    </View>
                  </View>

                  <View style={styles.confidenceContainer}>
                    <Text style={styles.confidenceLabel}>
                      Confidence: {(forecast.confidenceLevel * 100).toFixed(0)}%
                    </Text>
                    <View style={styles.confidenceBar}>
                      <View
                        style={[
                          styles.confidenceFill,
                          { width: `${forecast.confidenceLevel * 100}%` }
                        ]}
                      />
                    </View>
                  </View>

                  <View style={styles.factorsContainer}>
                    <Text style={styles.factorsTitle}>Key Factors:</Text>
                    {forecast.factors.map((factor: any, i: number) => (
                      <View key={`factor-${i}`} style={styles.factorItem}>
                        <View style={[
                          styles.factorImpact,
                          factor.impact === 'positive' ? styles.factorPositive :
                          factor.impact === 'negative' ? styles.factorNegative :
                          styles.factorNeutral
                        ]}>
                          <Ionicons
                            name={
                              factor.impact === 'positive' ? 'trending-up' :
                              factor.impact === 'negative' ? 'trending-down' :
                              'remove'
                            }
                            size={12}
                            color={colors.white}
                          />
                        </View>
                        <Text style={styles.factorText}>{factor.name}</Text>
                      </View>
                    ))}
                  </View>

                  <View style={styles.recommendationContainer}>
                    <Text style={styles.recommendationTitle}>Recommendation:</Text>
                    <Text style={styles.recommendationText}>{forecast.recommendation}</Text>
                  </View>
                </Card>
              ))}
            </>
          ) : (
            <Text style={styles.noDataText}>
              No market price forecasts available for your location.
            </Text>
          )}
        </View>
      )}

      {/* Crop Recommendations Section */}
      {activeTab === 'crop' && (
        <View style={styles.forecastSection}>
          <Text style={styles.sectionTitle}>Crop Recommendations</Text>

          {cropRecommendations.length > 0 ? (
            <>
              <Text style={styles.subtitle}>
                AI-powered crop recommendations based on your location and climate
              </Text>

              {cropRecommendations.map((crop, index) => (
                <Card key={`crop-${index}`} style={styles.cropCard}>
                  <View style={styles.cropHeader}>
                    <Text style={styles.cropName}>{crop.cropName}</Text>
                    <View style={styles.suitabilityContainer}>
                      <Text style={styles.suitabilityLabel}>Suitability</Text>
                      <View style={styles.suitabilityBar}>
                        <View
                          style={[
                            styles.suitabilityFill,
                            { width: `${crop.suitabilityScore * 100}%` },
                            crop.suitabilityScore > 0.7 ? styles.suitabilityHigh :
                            crop.suitabilityScore > 0.4 ? styles.suitabilityMedium :
                            styles.suitabilityLow
                          ]}
                        />
                      </View>
                      <Text style={styles.suitabilityValue}>
                        {(crop.suitabilityScore * 100).toFixed(0)}%
                      </Text>
                    </View>
                  </View>

                  <View style={styles.cropDetailsContainer}>
                    <View style={styles.cropDetailItem}>
                      <Text style={styles.cropDetailLabel}>Expected Yield</Text>
                      <Text style={styles.cropDetailValue}>
                        {crop.expectedYield.min.toFixed(1)} - {crop.expectedYield.max.toFixed(1)} {crop.expectedYield.unit}
                      </Text>
                    </View>

                    <View style={styles.cropDetailItem}>
                      <Text style={styles.cropDetailLabel}>Expected Price</Text>
                      <Text style={styles.cropDetailValue}>
                        ₹{crop.expectedPrice.min.toFixed(0)} - ₹{crop.expectedPrice.max.toFixed(0)} / {crop.expectedPrice.currency}
                      </Text>
                    </View>

                    <View style={styles.cropDetailItem}>
                      <Text style={styles.cropDetailLabel}>Growing Period</Text>
                      <Text style={styles.cropDetailValue}>
                        {new Date(crop.growingPeriod.start).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} -
                        {new Date(crop.growingPeriod.end).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                        ({Math.round((crop.growingPeriod.end - crop.growingPeriod.start) / (1000 * 60 * 60 * 24))} days)
                      </Text>
                    </View>

                    <View style={styles.cropDetailItem}>
                      <Text style={styles.cropDetailLabel}>Water Requirement</Text>
                      <Text style={styles.cropDetailValue}>
                        {crop.waterRequirement} mm
                      </Text>
                    </View>
                  </View>

                  <View style={styles.cropSection}>
                    <Text style={styles.cropSectionTitle}>Recommended Fertilizers</Text>
                    {crop.fertilizers.map((fertilizer: any, i: number) => (
                      <View key={`fertilizer-${i}`} style={styles.cropListItem}>
                        <Ionicons name="leaf-outline" size={16} color={colors.primary} />
                        <Text style={styles.cropListText}>
                          {fertilizer.name}: {fertilizer.quantity} {fertilizer.unit}
                        </Text>
                      </View>
                    ))}
                  </View>

                  <View style={styles.cropSection}>
                    <Text style={styles.cropSectionTitle}>Potential Risks</Text>
                    {crop.risks.map((risk: any, i: number) => (
                      <View key={`risk-${i}`} style={styles.cropListItem}>
                        <View style={[
                          styles.riskIndicator,
                          risk.impact === 'high' ? styles.riskHigh :
                          risk.impact === 'medium' ? styles.riskMedium :
                          styles.riskLow
                        ]}>
                          <Text style={styles.riskProbability}>
                            {(risk.probability * 100).toFixed(0)}%
                          </Text>
                        </View>
                        <View style={styles.riskDetails}>
                          <Text style={styles.riskName}>{risk.name}</Text>
                          <Text style={styles.riskMitigation}>{risk.mitigation}</Text>
                        </View>
                      </View>
                    ))}
                  </View>
                </Card>
              ))}
            </>
          ) : (
            <Text style={styles.noDataText}>
              No crop recommendations available for your location.
            </Text>
          )}
        </View>
      )}
    </ScrollView>
  );
};

// Helper function to get weather icon
const getWeatherIcon = (condition: string): any => {
  switch (condition) {
    case 'sunny':
      return 'sunny';
    case 'partly_cloudy':
      return 'partly-sunny';
    case 'cloudy':
      return 'cloud';
    case 'rainy':
      return 'rainy';
    case 'stormy':
      return 'thunderstorm';
    case 'snowy':
      return 'snow';
    default:
      return 'partly-sunny';
  }
};

// Helper function to format weather condition
const formatCondition = (condition: string): string => {
  return condition
    .split('_')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

// Helper function to format date
const formatDate = (timestamp: number): string => {
  const date = new Date(timestamp);
  return `${date.getDate()}/${date.getMonth() + 1}`;
};

// Styles
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  contentContainer: {
    padding: spacing.md,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: colors.background,
  },
  loadingText: {
    marginTop: spacing.md,
    fontSize: typography.fontSize.md,
    color: colors.textSecondary,
  },
  noDataContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: spacing.xl,
    backgroundColor: colors.background,
  },
  noDataTitle: {
    fontSize: typography.fontSize.xl,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
    marginTop: spacing.md,
    marginBottom: spacing.sm,
  },
  noDataText: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
    textAlign: 'center',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: spacing.lg,
    ...getPlatformTopSpacing('paddingTop', spacing.md, spacing.xl),
  },
  headerLeft: {
    flex: 1,
  },
  title: {
    fontSize: typography.fontSize.xxl,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
  },
  subtitle: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
  },
  aiButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: colors.surfaceLight,
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.sm,
    borderRadius: borderRadius.md,
    borderWidth: 1,
    borderColor: colors.primary,
  },
  aiButtonText: {
    marginLeft: spacing.xs,
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.medium,
    color: colors.primary,
  },
  // Tab navigation styles
  tabContainer: {
    flexDirection: 'row',
    marginBottom: spacing.lg,
    borderRadius: borderRadius.md,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: colors.lightGray,
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: spacing.md,
    gap: spacing.xs,
  },
  activeTab: {
    backgroundColor: colors.primaryLight,
  },
  tabText: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.medium,
    color: colors.textSecondary,
  },
  activeTabText: {
    color: colors.primary,
  },
  // Recommendation styles
  recommendationsCard: {
    marginBottom: spacing.lg,
  },
  sectionTitle: {
    fontSize: typography.fontSize.lg,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
    marginBottom: spacing.md,
  },
  recommendationItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: spacing.md,
  },
  recommendationText: {
    flex: 1,
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.regular,
    color: colors.textPrimary,
    marginLeft: spacing.sm,
  },
  // Weather forecast styles
  forecastSection: {
    marginBottom: spacing.lg,
  },
  todayWeatherCard: {
    marginBottom: spacing.md,
  },
  cardTitle: {
    fontSize: typography.fontSize.lg,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
    marginBottom: spacing.sm,
  },
  todayWeatherContent: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  weatherIconContainer: {
    alignItems: 'center',
    marginRight: spacing.lg,
    marginBottom: spacing.md,
  },
  weatherCondition: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.medium,
    color: colors.textPrimary,
    marginTop: spacing.xs,
  },
  temperatureContainer: {
    marginRight: spacing.lg,
    marginBottom: spacing.md,
  },
  currentTemperature: {
    fontSize: typography.fontSize.xxxl,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
  },
  minMaxTemp: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
  },
  weatherDetailsContainer: {
    flex: 1,
    flexDirection: 'column',
  },
  weatherDetail: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.sm,
  },
  weatherDetailText: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
    marginLeft: spacing.xs,
  },
  // Weekly forecast styles
  weeklyForecastContainer: {
    marginTop: spacing.md,
  },
  dayForecastCard: {
    marginBottom: spacing.sm,
    padding: spacing.sm,
  },
  dayForecastContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  dayNameContainer: {
    width: 80,
  },
  dayName: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.medium,
    color: colors.textPrimary,
  },
  dayIconContainer: {
    alignItems: 'center',
    width: 60,
  },
  dayCondition: {
    fontSize: typography.fontSize.xs,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
    textAlign: 'center',
  },
  dayTempContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    width: 100,
  },
  dayTemp: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
    marginRight: spacing.sm,
  },
  dayTempMin: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
  },
  dayPrecipContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  dayPrecip: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
    marginLeft: spacing.xs,
  },

  // Market forecast styles
  marketCard: {
    marginBottom: spacing.md,
  },
  marketCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: spacing.md,
  },
  marketCropName: {
    fontSize: typography.fontSize.lg,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
  },
  priceTrend: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: spacing.sm,
    paddingVertical: spacing.xs,
    borderRadius: borderRadius.sm,
  },
  priceTrendUp: {
    backgroundColor: colors.success,
  },
  priceTrendDown: {
    backgroundColor: colors.error,
  },
  priceTrendText: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.bold,
    color: colors.white,
    marginLeft: spacing.xs,
  },
  priceContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: spacing.md,
  },
  priceItem: {
    alignItems: 'center',
  },
  priceLabel: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
    marginBottom: spacing.xs,
  },
  priceValue: {
    fontSize: typography.fontSize.xl,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
  },
  priceUp: {
    color: colors.success,
  },
  priceDown: {
    color: colors.error,
  },
  priceArrow: {
    padding: spacing.sm,
  },
  confidenceContainer: {
    marginBottom: spacing.md,
  },
  confidenceLabel: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.medium,
    color: colors.textSecondary,
    marginBottom: spacing.xs,
  },
  confidenceBar: {
    height: 8,
    backgroundColor: colors.lightGray,
    borderRadius: borderRadius.round,
    overflow: 'hidden',
  },
  confidenceFill: {
    height: '100%',
    backgroundColor: colors.primary,
    borderRadius: borderRadius.round,
  },
  factorsContainer: {
    marginBottom: spacing.md,
  },
  factorsTitle: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.medium,
    color: colors.textPrimary,
    marginBottom: spacing.sm,
  },
  factorItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.xs,
  },
  factorImpact: {
    width: 20,
    height: 20,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: spacing.sm,
  },
  factorPositive: {
    backgroundColor: colors.success,
  },
  factorNegative: {
    backgroundColor: colors.error,
  },
  factorNeutral: {
    backgroundColor: colors.mediumGray,
  },
  factorText: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.regular,
    color: colors.textPrimary,
  },
  recommendationContainer: {
    backgroundColor: colors.primaryLight,
    padding: spacing.md,
    borderRadius: borderRadius.md,
  },
  recommendationTitle: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
    marginBottom: spacing.xs,
  },

  // Crop recommendation styles
  cropCard: {
    marginBottom: spacing.md,
  },
  cropHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: spacing.md,
  },
  cropName: {
    fontSize: typography.fontSize.lg,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
    flex: 1,
    marginRight: spacing.md,
  },
  suitabilityContainer: {
    alignItems: 'flex-end',
    width: 120,
  },
  suitabilityLabel: {
    fontSize: typography.fontSize.xs,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
    marginBottom: spacing.xs,
  },
  suitabilityBar: {
    width: '100%',
    height: 8,
    backgroundColor: colors.lightGray,
    borderRadius: borderRadius.round,
    overflow: 'hidden',
    marginBottom: spacing.xs,
  },
  suitabilityFill: {
    height: '100%',
    borderRadius: borderRadius.round,
  },
  suitabilityHigh: {
    backgroundColor: colors.success,
  },
  suitabilityMedium: {
    backgroundColor: colors.warning,
  },
  suitabilityLow: {
    backgroundColor: colors.error,
  },
  suitabilityValue: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
  },
  cropDetailsContainer: {
    marginBottom: spacing.md,
  },
  cropDetailItem: {
    marginBottom: spacing.sm,
  },
  cropDetailLabel: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.medium,
    color: colors.textSecondary,
    marginBottom: spacing.xs,
  },
  cropDetailValue: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.regular,
    color: colors.textPrimary,
  },
  cropSection: {
    marginBottom: spacing.md,
    backgroundColor: colors.surfaceLight,
    padding: spacing.md,
    borderRadius: borderRadius.md,
  },
  cropSectionTitle: {
    fontSize: typography.fontSize.md,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
    marginBottom: spacing.sm,
  },
  cropListItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.xs,
  },
  cropListText: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.regular,
    color: colors.textPrimary,
    marginLeft: spacing.sm,
  },
  riskIndicator: {
    width: 36,
    height: 24,
    borderRadius: borderRadius.sm,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: spacing.sm,
  },
  riskHigh: {
    backgroundColor: colors.error,
  },
  riskMedium: {
    backgroundColor: colors.warning,
  },
  riskLow: {
    backgroundColor: colors.success,
  },
  riskProbability: {
    fontSize: typography.fontSize.xs,
    fontFamily: typography.fontFamily.bold,
    color: colors.white,
  },
  riskDetails: {
    flex: 1,
  },
  riskName: {
    fontSize: typography.fontSize.sm,
    fontFamily: typography.fontFamily.bold,
    color: colors.textPrimary,
  },
  riskMitigation: {
    fontSize: typography.fontSize.xs,
    fontFamily: typography.fontFamily.regular,
    color: colors.textSecondary,
  },
});

export default ForecastScreen;
